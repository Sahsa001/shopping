import React, { useState, useEffect } from "react";
import "./About.css";
import aboutImg from "../../assets/zav.png";



export default function About() {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState("");
  const [newImages, setNewImages] = useState([]);
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxIndex, setLightboxIndex] = useState(0);
  const [lightboxImages, setLightboxImages] = useState([]);

  useEffect(() => {
    const savedComments = localStorage.getItem("comments");
    if (savedComments) setComments(JSON.parse(savedComments));
  }, []);

  const handleAddComment = () => {
    if (!newComment.trim()) return;

    const comment = {
      text: newComment,
      date: new Date().toLocaleString(),
      images: newImages.map((file) => URL.createObjectURL(file)),
      likes: 0
    };

    const updatedComments = [comment, ...comments];
    setComments(updatedComments);
    localStorage.setItem("comments", JSON.stringify(updatedComments));
    setNewComment("");
    setNewImages([]);
  };

  const handleImageChange = (e) => {
    setNewImages([...e.target.files]);
  };

  const handleImageClick = (images, index) => {
    setLightboxImages(images.map((src) => ({ src })));
    setLightboxIndex(index);
    setLightboxOpen(true);
  };

  const handleLike = (idx) => {
    const updatedComments = [...comments];
    updatedComments[idx].likes += 1;
    setComments(updatedComments);
    localStorage.setItem("comments", JSON.stringify(updatedComments));
  };

  const handleDelete = (idx) => {
    const updatedComments = comments.filter((_, i) => i !== idx);
    setComments(updatedComments);
    localStorage.setItem("comments", JSON.stringify(updatedComments));
  };

  return (
    <div className="about-page">
      <div className="about-container">
        <div className="about-image">
          <img src={aboutImg} alt="–û –∫–æ–º–ø–∞–Ω–∏–∏" />
        </div>

        <div className="about-content">
          <h1>–û –∫–æ–º–ø–∞–Ω–∏–∏</h1>
          <p>
            –ö–æ–º–ø–∞–Ω–∏—è <strong>DEMM</strong> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ —Å–º–µ—Å–∏—Ç–µ–ª–∏,
            –¥—É—à–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ
            –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —á—Ç–æ–±—ã
            —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
          </p>

          <a href="/contacts" className="about-btn">–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</a>

          <div className="about-facts">
            <div className="fact">
              <h2>10+</h2>
              <p>–ñ—ã–ª —Ç–∞–∂—Ä—ã–π–±–∞</p>
            </div>
            <div className="fact">
              <h2>5000+</h2>
              <p>–ö–∞—Ä–¥–∞—Ä–ª–∞—Ä</p>
            </div>
            <div className="fact">
              <h2>100%</h2>
              <p>–°–∞–ø–∞—Ç –∫–µ–ø–∏–ª–¥–∏–≥–∏</p>
            </div>
          </div>

          <div className="testimonials">
            <div className="testimonial">
              <p>‚Äú–ü—Ä–æ–¥—É–∫—Ü–∏—è —Å—É–ø–µ—Ä, –∫—ã–∑–º–∞—Ç —Å–∞–ø–∞—Ç—Ç—É—É!‚Äù</p>
              <h4>–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</h4>
            </div>
            <div className="testimonial">
              <p>‚ÄúDEMM ‚Äì –±—É–ª –∏—à–µ–Ω–∏–º–¥“Ø“Ø –±—Ä–µ–Ω–¥.‚Äù</p>
              <h4>–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞</h4>
            </div>
          </div>

          <div className="comments-section">
            <h2>–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤</h2>
            <textarea
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤..."
            />
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleImageChange}
            />
            <button onClick={handleAddComment}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>

            <div className="comments-list">
              {comments.map((comment, idx) => (
                <div className="comment" key={idx}>
                  <p>{comment.text}</p>
                  <span className="comment-date">{comment.date}</span>

                  {comment.images && comment.images.length > 0 && (
                    <div className="comment-images">
                      {comment.images.map((img, index) => (
                        <img
                          key={index}
                          src={img}
                          alt={`–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${index + 1}`}
                          onClick={() =>
                            handleImageClick(comment.images, index)
                          }
                        />
                      ))}
                    </div>
                  )}

                  <div className="comment-actions">
                    <button onClick={() => handleLike(idx)}>‚ù§Ô∏è {comment.likes}</button>
                    <button onClick={() => handleDelete(idx)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {lightboxOpen && (
        <Lightbox
          open={lightboxOpen}
          close={() => setLightboxOpen(false)}
          slides={lightboxImages}
          index={lightboxIndex}
        />
      )}
    </div>
  );
}
